filter {
   grok {
      match => {
         "message" => [
            "%{NUMBER:pid:long}:%{ZTIMESTAMP:zts} %{GREEDYMULTILINE:message}"
         ]
      }
      pattern_definitions => {
         "ZTIMESTAMP" => "%{INT}:%{INT}\.%{INT}"
         "GREEDYMULTILINE" => "(.|
)*"
      }
   overwrite => [ "message" ]
   }
   date {
      match => [ "zts", "yyyyMMdd:HHmmss.SSS" ]
      timezone => "Europe/Kiev"
      target => "@timestamp"
      tag_on_failure => ["zts_parsefailure"]
      remove_field => [ "zts" ]
   }

   grok {
         match => {
             "message" => [
             "error reason for \"%{IPORHOST:[zabbix][host]}:%{DATA:[zabbix][key]}\" changed: %{GREEDYMULTILINE:[zabbix][reason]}",
             "item \"%{IPORHOST:[zabbix][host]}:%{DATA:[zabbix][key]}\" became %{ITEMSTATUS:[zabbix][status]}(: %{GREEDYDATA:[zabbix][reason]})?",
             "discovery rule \"%{IPORHOST:[zabbix][host]}:%{DATA:[zabbix][key]}\" became %{ITEMSTATUS:[zabbix][status]}(: %{GREEDYDATA:[zabbix][reason]})?",
             "enabling %{DATA:[zabbix][itemtype]} checks on host \"{IPORHOST:[zabbix][host]}\": %{GREEDYDATA:[zabbix][reason]}",
             "resuming %{DATA:[zabbix][itemtype]} checks on host \"%{DATA:[zabbix][host]}\": %{GREEDYDATA:[zabbix][reason]}",
             "%{DATA:[zabbix][itemtype]} item \"%{DATA:[zabbix][key]}\" on host \"%{IPORHOST:[zabbix][host]}\" failed: %{GREEDYDATA:[zabbix][reason]}",
             "temporarily disabling %{DATA:[zabbix][itemtype]} checks on host \"%{IPORHOST:[zabbix][host]}\": %{GREEDYDATA:[zabbix][reason]}"
            ]
         }
         pattern_definitions => {
            "HOST_NAME" => "\b(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62}))*(\.?|\b)"
            "IPORHOST" => "(?:%{IP}|%{HOSTNAME}||%{HOST_NAME})"
            "ITEMSTATUS" => "(not )?supported"
            "GREEDYMULTILINE" => "(.|
)*"
         }
         keep_empty_captures => true
         tag_on_failure => ["zabbix_grokfailure"]
         add_field => { "[zabbix][logtype]" => "itemerror" }
   }

   if "zabbix_grokfailure" in [tags] {
   ## dberror
     grok {
         match => {
             "message" => [
             "\[Z3001\] connection to database %{DATA} failed: %{GREEDYMULTILINE:[zabbix][reason]}",
             "\[Z3002\] cannot create database %{DATA}: %{GREEDYMULTILINE:[zabbix][reason]}",
             "\[Z3003\] no connection to the database",
             "\[Z3004\] cannot close database: \[%{NUMBER:errornum:long}\] %{GREEDYMULTILINE:[zabbix][reason]}",
             "\[Z3005\] query failed: \[%{NUMBER:errornum:long}\] %{GREEDYMULTILINE:[zabbix][reason]}",
             "\[Z3006\] fetch failed: \[%{NUMBER:errornum:long}\] %{GREEDYMULTILINE:[zabbix][reason]}",
             "\[Z3007\] query failed: \[%{NUMBER:errornum:long}\] %{GREEDYMULTILINE:[zabbix][reason]}",
             "slow query: %{BASE10NUM:[zabbix][duraion]:long} sec, \"%{GREEDYMULTILINE:[zabbix][reason]}\""
            ]
         }
         pattern_definitions => {
            "GREEDYMULTILINE" => "(.|
)*"
         }
         keep_empty_captures => true
         remove_tag => [ "zabbix_grokfailure" ]
         tag_on_failure => ["zabbix_grokfailure"]
         add_field => { "[zabbix][logtype]" => "dberror" }
    }
   }

   if "zabbix_grokfailure" in [tags] {
   ## proxyerror
     grok {
         match => {
             "message" => [
             "proxy \"%{DATA:[zabbix][proxy]}\" %{GREEDYDATA:[zabbix][reason]}",
             "sending configuration data to proxy \"%{DATA:[zabbix][proxy]}\" at \"%{DATA:[zabbix][host]}\", datalen %{INT:[zabbix][datalen]:long}"
            ]
         }
         pattern_definitions => {
            "ITEMSTATUS" => "(not )?supported"
            "GREEDYMULTILINE" => "(.|
)*"
         }
         keep_empty_captures => true
         remove_tag => [ "zabbix_grokfailure" ]
         tag_on_failure => ["zabbix_grokfailure"]
         add_field => { "[zabbix][logtype]" => "proxyerror" }

    }
   }

   if "zabbix_grokfailure" in [tags] {
   ## commanderror
     grok {
         match => {
             "message" => [
             "Failed to execute command \"%{GREEDYMULTILINE:[zabbix][command]}\": %{GREEDYDATA:[zabbix][reason]}"
            ]
         }
         pattern_definitions => {
            "ITEMSTATUS" => "(not )?supported"
            "GREEDYMULTILINE" => "(.|
)*"
         }
         keep_empty_captures => true
         remove_tag => [ "zabbix_grokfailure" ]
         tag_on_failure => ["zabbix_grokfailure"]
         add_field => { "[zabbix][logtype]" => "commanderror" }
    }
   }

   if "zabbix_grokfailure" in [tags] {
   ## activecheck
     grok {
         match => {
             "message" => [
             "cannot send list of active checks to \"%{DATA:[zabbix][ipaddr]}\": host \[%{DATA:[zabbix][host]}\] %{GREEDYMULTILINE:[zabbix][reason]}"
            ]
         }
         pattern_definitions => {
            "ITEMSTATUS" => "(not )?supported"
            "GREEDYMULTILINE" => "(.|
)*"
         }
         keep_empty_captures => true
         remove_tag => [ "zabbix_grokfailure" ]
         tag_on_failure => ["zabbix_grokfailure"]
         add_field => { "[zabbix][logtype]" => "activecheck" }
    }
   }

   if "zabbix_grokfailure" in [tags] {
   ## housekeeper
     grok {
         match => {
             "message" => [
                "^housekeeper %{DATA}",
                "^executing housekeeper",
                "^forced execution of the housekeeper",
                "^housekeeping procedure is already in progress",
                "^invalid history storage period %{DATA}",
                "^invalid trends storage period %{DATA}", 
                "^cannot drop chunks for %{DATA}",
                "^failed to add compression policy to table %{DATA}",
                "^failed to set database compression status"
            ]
         }
         pattern_definitions => {
            "GREEDYMULTILINE" => "(.|
)*"
         }
         keep_empty_captures => true
         remove_tag => [ "zabbix_grokfailure" ]
         tag_on_failure => ["zabbix_grokfailure"]
         add_field => { "[zabbix][logtype]" => "housekeeper" }
    }
   }

}
